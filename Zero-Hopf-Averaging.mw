
Function 1 StandardForm

#################################################################################################################
Input: A perturbed differential system P=[\dot{x}_1,\dot{x}_2,\ldots,\dot{x}_n] with an order k
#################################################################################################################
    
#################################################################################################################
Output: Standard form of averaging up to the k-th order in epsilon
#################################################################################################################

StandardForm := proc (P, k) 
local n, d, s, dd, T; 
n := nops(P); 
d[1] := subs(x[1] = r*cos(theta), x[2] = r*sin(theta), cos(theta)*P[1]+sin(theta)*P[2]); 
d[2] := subs(x[1] = r*cos(theta), x[2] = r*sin(theta), (cos(theta)*P[2]-sin(theta)*P[1])/r); 
T[1] := series(factor(subs(r = epsilon*R, seq(x[j] = epsilon*X[j], j = 3 .. n), d[1]/d[2])/epsilon), epsilon = 0, k+1); 
dd[1] := collect(simplify(convert(T[1], polynom), {cos(theta)^2+sin(theta)^2-1}, [sin(theta)]), epsilon); 
for s from 3 to n do d[s] := subs(x[1] = r*cos(theta), x[2] = r*sin(theta), P[s]); 
T[s] := series(factor(subs(r = epsilon*R, seq(x[j] = epsilon*X[j], j = 3 .. n), d[s]/d[2])/epsilon), epsilon = 0, k+1); 
dd[s] := collect(simplify(convert(T[s], polynom), {cos(theta)^2+sin(theta)^2-1}, [sin(theta)]), epsilon); 
end do; 
return [dd[1], seq(dd[j], j = 3 .. n)]; 
end proc:" 


Function 2 BellSeqs

#################################################################################################################
Input: Positive integers l and m
#################################################################################################################
    
#################################################################################################################
Output: A set of lists induced by the Bell polynomial
#################################################################################################################

BellSeqs := proc (l, m) 
local MultSeq, BP, SM, Bset, X, pb, ic, bs; 

MultSeq := proc (x, kt) 
local ST, id; 
if kt < 1 then return op([]); 
else ST[0] := [x]; 
for id to kt-1 do 
ST[id] := [x, op(ST[id-1])]; 
end do; 
return op(ST[kt-1]); 
end if; end proc:

BP := IncompleteBellB(l, m, seq(y[i], i = 1 .. l-m+1)); 
if nops([coeffs(BP)]) > 1 then SM := [op(BP)]; 
else SM := [BP]; end if;
Bset := {}; X[0] := []; 
for pb in SM do 
for ic to l-m+1 do 
bs[ic] := degree(pb, y[ic]); 
X[ic] := [op(X[ic-1]), MultSeq(y[ic], bs[ic])]; end do; 
Bset := `union`(Bset, {[X[l-m+1], coeffs(pb)]}); end do; 
return Bset; end proc:

    
Note: In the following functions, 
the variables z=[z_1,...,z_n] in the averaging formula are replaced by Z=[R,X_3,...,X_n]
    
Function 3 LmultMap

#################################################################################################################
Input: Positive integers m and n1, a smooth function F, and a list of vectors Y
#################################################################################################################
    
#################################################################################################################
Output: An expansion of the m-multilinear map
#################################################################################################################

LmultMap:=proc(m,n1,F,Y)  
local AllNumbers, Z, LM, Num, ds, ls, W;

AllNumbers := proc (m, n1) 
local NL, TS, h; 

NL := proc (m, m1, n1) 
local U, t, U0, u, i, S, k1, xs, v, u1, T, u2, r; 
U := {seq([j], j = 0 .. m1)}; 
for t to m-1 do 
U0 := {}; 
for u in U do 
for i from 0 to m1-(sum(op(j, u), j = 1 .. t)) do 
U0 := `union`(U0, {[op(u), i]}); end do; end do; 
U := U0 end do; S := {}; 
if verify(m1, 0, greater_equal) and verify(m1, (n1-1)*m, less_equal) then 
for k1 to m do xs[k1] := 2; end do; 
v := [seq(xs[j], j = 1 .. m)]; 
for u1 in U do 
if verify(sum(op(j, u1), j = 1 .. m)-m1, 0, equal) then 
S := `union`(S, {u1+v}); end if; end do; end if; 
T := S; if verify(n1, 1, greater_than) then 
for u2 in T do 
for r to m do 
if verify(op(r, u2), n1+1, greater_than) then 
T := `minus`(T, {u2}); end if; end do; end do; end if; 
return T; end proc; 

TS := {}; 
for h from 0 to (n1-1)*m do 
TS := `union`(TS, NL(m, h, n1)); end do; return TS; end proc:

Z:=op([R,seq(X[j],j=3..n1+1)]);   LM:=0;   
Num:=AllNumbers(m,n1);  
for ds in Num do    
for ls from 1 to m do 
W[ls]:=Y[ls][op(ls,ds)-1](theta,Z); od;     
LM:=LM+convert(D[op(ds)](F)(theta,Z)*product(W[j],j=1..m),Diff); od; 
return LM; end proc:


Function 4 LMNFBell

#################################################################################################################
Input: Positive integers l, m and n1, a smooth function F
#################################################################################################################
   
#################################################################################################################
Output: Symbolic expression of an equation in (2.8), see the remark after Algorithm 4 in the paper
#################################################################################################################

LMNFBell:=proc(l,m,n1,F)
local Yyseqs, Yy, BYC, jx, x, SL, Q, Y, MP;

Yyseqs:=proc(l,m,n1)
local Yq, iy;
Yq:=[];
for iy from 1 to l-m+1 do
Yq := [op(Yq),[seq(y[iy,j],j=1..n1)]]; od; return Yq; end proc:

Yy := Yyseqs(l,m,n1);
BYC:=subs(y=x,BellSeqs(l, m));
for jx from 1 to l-m+1 do
x[jx]:=op(jx,Yy); od;
SL:=0;
for Q in BYC do
Y:=Q[1];
MP:=LmultMap(m, n1, F, Y):
SL:=SL+Q[2]*MP; od;
return SL; end proc:


Function 5 OrderKFormula

#################################################################################################################
Input: Positive integers k and n1
#################################################################################################################
   
#################################################################################################################
Output: List of formulae of the integral function y_k(\theta,z)
#################################################################################################################

OrderKFormula := proc (k,n1) 
local Intfun, jk, UK, l, m; 

Intfun:=[];
for jk from 1 to n1 do
UK := factorial(k)*(F[k,jk](theta, op([R,seq(X[j],j=3..n1+1)]))); 
for l to k-1 do 
for m to l do 
UK := UK+(factorial(k)/factorial(l))*LMNFBell(l,m,n1,F[k-l,jk]); 
od; od; 
    
Intfun:=[op(Intfun),Int(UK,theta=0 .. theta)]; od;
return Intfun; end proc:


Function 6 AveragedFunctions

#################################################################################################################
Input: Standard form of averaging with an order k
#################################################################################################################
   
#################################################################################################################
Output: List of the k-th order averaged functions
#################################################################################################################

AveragedFunctions:=proc(SF,k)

local n1, Z, t, i, s, h, T, Y, Funlist;
global F, y;

n1:=nops(SF);
Z:=[theta,R,seq(X[j],j=3..n1+1)];

for t from 1 to k do
for i from 1 to n1 do
T[t,i]:=coeff(SF[i],(epsilon)^t);
F[t,i]:=unapply(T[t,i],Z);  od; od;

for s from 1 to k do
for h from 1 to n1 do
Y[s,h]:=op(h,OrderKFormula(s,n1));
y[s,h]:=unapply(value(Y[s,h]),Z); od; od;   

Funlist:= [seq(factor((1)/(k!)*y[k,l](2*Pi,R,seq(X[j],j=3..n1+1))),l=1..n1)];
return Funlist; end proc:




