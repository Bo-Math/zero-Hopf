The first auxiliary function: StandardForm(P,k)

#################################################################################################################
Input: A perturbed differential system P=[\dot{x}_1,\dot{x}_2,\ldots,\dot{x}_n] with an order k
#################################################################################################################
    
#################################################################################################################
Output: Standard form of averaging up to the k-th order in varepsilon (denote by SF)
#################################################################################################################

StandardForm := proc(P, k) 
local n, d, s, dd, T, j; 
n := nops(P); 
d[2] := subs(x[1] = r*cos(theta), x[2] = r*sin(theta), (cos(theta)*P[2] - sin(theta)*P[1])/r); 
d[1] := subs(x[1] = r*cos(theta), x[2] = r*sin(theta), cos(theta)*P[1] + sin(theta)*P[2])/d[2]; 
for s from 3 to n do 
d[s] := subs(x[1] = r*cos(theta), x[2] = r*sin(theta), P[s])/d[2]; 
end do; 
T[1] := series(factor(subs(r = varepsilon*R, seq(x[j] = varepsilon*X[j], j = 3 .. n), d[1])/varepsilon), varepsilon = 0, k + 1); 
dd[1] := collect(simplify(convert(T[1], polynom), {cos(theta)^2 + sin(theta)^2 - 1}, [sin(theta)]), varepsilon); 
for s from 3 to n do 
T[s] := series(factor(subs(r = varepsilon*R, seq(x[j] = varepsilon*X[j], j = 3 .. n), d[s])/varepsilon), varepsilon = 0, k + 1); 
dd[s] := collect(simplify(convert(T[s], polynom), {cos(theta)^2 + sin(theta)^2 - 1}, [sin(theta)]), varepsilon); 
end do; 
return [dd[1], seq(dd[j], j = 3 .. n)]; 
end proc;


The second auxiliary function: OrderKFormula(k,n1)

#################################################################################################################
Input: Positive integers k and n1 (n1:=nops(SF))
#################################################################################################################
   
#################################################################################################################
Output: List of formulae of the integral function y_k(\theta,z)
#################################################################################################################


OrderKFormula := proc (k,n1) 
local SKM, jk, UK, l, m, j; 

SKM:=[];
for jk from 1 to n1 do

UK := factorial(k)*(F[k,jk](theta, op([R,seq(X[j],j=3..n1+1)]))); 

for l to k-1 do 
for m to l do 
UK := UK+(factorial(k)/factorial(l))*LFBProduct(l,m,n1,F[k-l,jk]); 
od; od; 

SKM:=[op(SKM),Int(UK,theta=0 .. theta)]; od;

return SKM; end proc:



----------------------------------------------------------------------------------------------------------------
Subfunction:  LFBProduct(l,m,n1,F)

#################################################################################################################
Input: Positive integers l, m and n1, a smooth function F
#################################################################################################################
   
#################################################################################################################
Output: Symbolic expression of an equation in (2.8)
#################################################################################################################


LFBProduct:=proc(l,m,n1,F)
 local Yyseqs, Yy, BYC, jx, x, SL, Q, Y, MP;

Yyseqs:=proc(l,m,n1)
local Yq, iy, j;
Yq:=[];
for iy from 1 to l-m+1 do
Yq := [op(Yq),[seq(y[iy,j],j=1..n1)]]; od; return Yq; end proc:

Yy := Yyseqs(l,m,n1);
BYC:=subs(y=x,BellYCseqs(l, m));
for jx from 1 to l-m+1 do
x[jx]:=op(jx,Yy); od;
SL:=0;
for Q in BYC do
Y:=Q[1];
MP:=MProduct(m, n1, F, Y):
SL:=SL+Q[2]*MP; od;
return SL; end proc:



Subalgorithm 1: BellYCseqs(l, m) 

#################################################################################################################
Input: Positive integers l and m
#################################################################################################################
    
#################################################################################################################
Output: A set of lists induced by the Bell polynomial
#################################################################################################################

BellYCseqs := proc (l, m) 
local MultSeq, BP, SM, Yseq, X, pb, ic, bs, i; 

MultSeq := proc (x, kt) 
local ST, id; 
if kt < 1 then return op([]); else ST[0] := [x]; 
for id to kt-1 do 
ST[id] := [x, op(ST[id-1])]; end do; 
return op(ST[kt-1]) end if; end proc:

BP := IncompleteBellB(l, m, seq(y[i], i = 1 .. l-m+1)); 
if nops([coeffs(BP)]) > 1 then SM := [op(BP)]; 
else SM := [BP]; end if;
Yseq := {}; X[0] := []; 
for pb in SM do 
for ic to l-m+1 do 
bs[ic] := degree(pb, y[ic]); 
X[ic] := [op(X[ic-1]), MultSeq(y[ic], bs[ic])]; end do; 
Yseq := `union`(Yseq, {[X[l-m+1], coeffs(pb)]}); end do; 
return Yseq; end proc:



Subalgorithm 2: MProduct(m,n1,F,Y)  

#################################################################################################################
Input: Positive integers m and n1, a smooth function F, and a list of vectors Y
#################################################################################################################
    
#################################################################################################################
Output: An expansion of the m-multilinear map
#################################################################################################################

MProduct:=proc(m,n1,F,Y)  
local AllNumbers, Z, SAT, ANN, ds, ls, W, j;

AllNumbers := proc (m, n1) 
local NL, TS, h; 

NL := proc (m, m1, n1) 
local U, t, U0, u, i, S, k1, xs, v, u1, T, u2, r; 
U := {seq([j], j = 0 .. m1)}; 
for t to m-1 do 
U0 := {}; 
for u in U do 
for i from 0 to m1-(sum(op(j, u), j = 1 .. t)) do 
U0 := `union`(U0, {[op(u), i]}); end do; end do; 
U := U0 end do; S := {}; 
if verify(m1, 0, greater_equal) and verify(m1, (n1-1)*m, less_equal) then 
for k1 to m do xs[k1] := 2; end do; 
v := [seq(xs[j], j = 1 .. m)]; 
for u1 in U do 
if verify(sum(op(j, u1), j = 1 .. m)-m1, 0, equal) then 
S := `union`(S, {u1+v}); end if; end do; end if; 
T := S; if verify(n1, 1, greater_than) then 
for u2 in T do 
for r to m do 
if verify(op(r, u2), n1+1, greater_than) then 
T := `minus`(T, {u2}); end if; end do; end do; end if; 
return T; end proc; 

TS := {}; 
for h from 0 to (n1-1)*m do 
TS := `union`(TS, NL(m, h, n1)); end do; return TS; end proc:

Z:=op([R,seq(X[j],j=3..n1+1)]);   SAT:=0;   
ANN:=AllNumbers(m,n1);  
for ds in ANN do    
for ls from 1 to m do 
W[ls]:=Y[ls][op(ls,ds)-1](theta,Z); od;     
SAT:=SAT+convert(D[op(ds)](F)(theta,Z)*product(W[j],j=1..m),Diff); od; 
return SAT; end proc:



### NOTE: Call subalgorithms before the Subfunction, and call subfunction before the auxiliary function!



The main process of the program: AveragedFunctions(NF,k)

#################################################################################################################
Input: Standard form of averaging with an order k
#################################################################################################################
   
#################################################################################################################
Output: List of the k-th order averaged functions
#################################################################################################################

AveragedFunctions:=proc(NF,k)

local n1, Z, t, i, s, h, T, Y, result, j, l;
global F, y;

n1:=nops(NF);
Z:=[theta,R,seq(X[j],j=3..n1+1)];

for t from 1 to k do
for i from 1 to n1 do
T[t,i]:=coeff(NF[i],(epsilon)^t);
F[t,i]:=unapply(T[t,i],Z);  od; od;

for s from 1 to k do
for h from 1 to n1 do
Y[s,h]:=op(h,OrderKFormula(s,n1));
y[s,h]:=unapply(value(Y[s,h]),Z); od; od;   

result:= [seq(factor((1)/(k!)*y[k,l](2*Pi,R,seq(X[j],j=3..n1+1))),l=1..n1)];

return result; end proc;



